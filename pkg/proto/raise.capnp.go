// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0x8faf26f7ff5fc78a

func (c Service) Ping(ctx context.Context, params func(Service_ping_Params) error) (Service_ping_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8faf26f7ff5fc78a,
			MethodID:      0,
			InterfaceName: "raise.capnp:Service",
			MethodName:    "ping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_ping_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_ping_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Service_Server is a Service with a local implementation.
type Service_Server interface {
	Ping(context.Context, Service_ping) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8faf26f7ff5fc78a,
			MethodID:      0,
			InterfaceName: "raise.capnp:Service",
			MethodName:    "ping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ping(ctx, Service_ping{call})
		},
	})

	return methods
}

// Service_ping holds the state for a server call to Service.ping.
// See server.Call for documentation.
type Service_ping struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_ping) Args() Service_ping_Params {
	return Service_ping_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_ping) AllocResults() (Service_ping_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_ping_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_ping_Params capnp.Struct

// Service_ping_Params_TypeID is the unique identifier for the type Service_ping_Params.
const Service_ping_Params_TypeID = 0xcdc43750d2997643

func NewService_ping_Params(s *capnp.Segment) (Service_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_ping_Params(st), err
}

func NewRootService_ping_Params(s *capnp.Segment) (Service_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_ping_Params(st), err
}

func ReadRootService_ping_Params(msg *capnp.Message) (Service_ping_Params, error) {
	root, err := msg.Root()
	return Service_ping_Params(root.Struct()), err
}

func (s Service_ping_Params) String() string {
	str, _ := text.Marshal(0xcdc43750d2997643, capnp.Struct(s))
	return str
}

func (s Service_ping_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_ping_Params) DecodeFromPtr(p capnp.Ptr) Service_ping_Params {
	return Service_ping_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_ping_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_ping_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_ping_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_ping_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_ping_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Service_ping_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_ping_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Service_ping_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Service_ping_Params_List is a list of Service_ping_Params.
type Service_ping_Params_List = capnp.StructList[Service_ping_Params]

// NewService_ping_Params creates a new list of Service_ping_Params.
func NewService_ping_Params_List(s *capnp.Segment, sz int32) (Service_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_ping_Params](l), err
}

// Service_ping_Params_Future is a wrapper for a Service_ping_Params promised by a client call.
type Service_ping_Params_Future struct{ *capnp.Future }

func (f Service_ping_Params_Future) Struct() (Service_ping_Params, error) {
	p, err := f.Future.Ptr()
	return Service_ping_Params(p.Struct()), err
}

type Service_ping_Results capnp.Struct

// Service_ping_Results_TypeID is the unique identifier for the type Service_ping_Results.
const Service_ping_Results_TypeID = 0xf597a04c6a005ca6

func NewService_ping_Results(s *capnp.Segment) (Service_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_ping_Results(st), err
}

func NewRootService_ping_Results(s *capnp.Segment) (Service_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_ping_Results(st), err
}

func ReadRootService_ping_Results(msg *capnp.Message) (Service_ping_Results, error) {
	root, err := msg.Root()
	return Service_ping_Results(root.Struct()), err
}

func (s Service_ping_Results) String() string {
	str, _ := text.Marshal(0xf597a04c6a005ca6, capnp.Struct(s))
	return str
}

func (s Service_ping_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_ping_Results) DecodeFromPtr(p capnp.Ptr) Service_ping_Results {
	return Service_ping_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_ping_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_ping_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_ping_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_ping_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Service_ping_Results_List is a list of Service_ping_Results.
type Service_ping_Results_List = capnp.StructList[Service_ping_Results]

// NewService_ping_Results creates a new list of Service_ping_Results.
func NewService_ping_Results_List(s *capnp.Segment, sz int32) (Service_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_ping_Results](l), err
}

// Service_ping_Results_Future is a wrapper for a Service_ping_Results promised by a client call.
type Service_ping_Results_Future struct{ *capnp.Future }

func (f Service_ping_Results_Future) Struct() (Service_ping_Results, error) {
	p, err := f.Future.Ptr()
	return Service_ping_Results(p.Struct()), err
}

type ClientService capnp.Client

// ClientService_TypeID is the unique identifier for the type ClientService.
const ClientService_TypeID = 0xfe5b5a2c82a9f41c

func (c ClientService) Ping(ctx context.Context, params func(Service_ping_Params) error) (Service_ping_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8faf26f7ff5fc78a,
			MethodID:      0,
			InterfaceName: "raise.capnp:Service",
			MethodName:    "ping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_ping_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_ping_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ClientService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ClientService) AddRef() ClientService {
	return ClientService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ClientService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ClientService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ClientService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ClientService) DecodeFromPtr(p capnp.Ptr) ClientService {
	return ClientService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ClientService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ClientService) IsSame(other ClientService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ClientService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ClientService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A ClientService_Server is a ClientService with a local implementation.
type ClientService_Server interface {
	Ping(context.Context, Service_ping) error
}

// ClientService_NewServer creates a new Server from an implementation of ClientService_Server.
func ClientService_NewServer(s ClientService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ClientService_Methods(nil, s), s, c)
}

// ClientService_ServerToClient creates a new Client from an implementation of ClientService_Server.
// The caller is responsible for calling Release on the returned Client.
func ClientService_ServerToClient(s ClientService_Server) ClientService {
	return ClientService(capnp.NewClient(ClientService_NewServer(s)))
}

// ClientService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ClientService_Methods(methods []server.Method, s ClientService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8faf26f7ff5fc78a,
			MethodID:      0,
			InterfaceName: "raise.capnp:Service",
			MethodName:    "ping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ping(ctx, Service_ping{call})
		},
	})

	return methods
}

// ClientService_List is a list of ClientService.
type ClientService_List = capnp.CapList[ClientService]

// NewClientService creates a new list of ClientService.
func NewClientService_List(s *capnp.Segment, sz int32) (ClientService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ClientService](l), err
}

type WorkerService capnp.Client

// WorkerService_TypeID is the unique identifier for the type WorkerService.
const WorkerService_TypeID = 0xf15bb405bd10aa7e

func (c WorkerService) Ping(ctx context.Context, params func(Service_ping_Params) error) (Service_ping_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8faf26f7ff5fc78a,
			MethodID:      0,
			InterfaceName: "raise.capnp:Service",
			MethodName:    "ping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_ping_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_ping_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c WorkerService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c WorkerService) AddRef() WorkerService {
	return WorkerService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c WorkerService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c WorkerService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c WorkerService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WorkerService) DecodeFromPtr(p capnp.Ptr) WorkerService {
	return WorkerService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c WorkerService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c WorkerService) IsSame(other WorkerService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c WorkerService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c WorkerService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A WorkerService_Server is a WorkerService with a local implementation.
type WorkerService_Server interface {
	Ping(context.Context, Service_ping) error
}

// WorkerService_NewServer creates a new Server from an implementation of WorkerService_Server.
func WorkerService_NewServer(s WorkerService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WorkerService_Methods(nil, s), s, c)
}

// WorkerService_ServerToClient creates a new Client from an implementation of WorkerService_Server.
// The caller is responsible for calling Release on the returned Client.
func WorkerService_ServerToClient(s WorkerService_Server) WorkerService {
	return WorkerService(capnp.NewClient(WorkerService_NewServer(s)))
}

// WorkerService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WorkerService_Methods(methods []server.Method, s WorkerService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8faf26f7ff5fc78a,
			MethodID:      0,
			InterfaceName: "raise.capnp:Service",
			MethodName:    "ping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ping(ctx, Service_ping{call})
		},
	})

	return methods
}

// WorkerService_List is a list of WorkerService.
type WorkerService_List = capnp.CapList[WorkerService]

// NewWorkerService creates a new list of WorkerService.
func NewWorkerService_List(s *capnp.Segment, sz int32) (WorkerService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WorkerService](l), err
}

const schema_c1dd04a4b598e212 = "x\xda|\xd0\xb1K\x02a\x18\x06\xf0\xf7\xb9\xfb\xae\x8b" +
	"P\xf4\xfa\x04\x97\xa0E\x1aD\x84h\x08Z\x12\x1cZ" +
	"\x1a\xeej\x08R\x88C>\xe2J/\xb9S\xa1\xa1\x86" +
	"\xb6\x02i\x92r\xab0\xa1 Zrhh\x08\x82\xa6" +
	"\x16\xf7\x96\xfe\x83\xa0h\x08\xba\xb8\x93R\x10\xdc>\xbe" +
	"\xf7\xe5\xf7<\xbc\xd1V\x86\xcd\x86\xa7e\x92\x8c\x842" +
	"\xe6\x1d=ox_3\xb7\xc7\xa4\x85do\xf2\xed\xb4" +
	"\xd3b\xaf\x8fD\xe0U\\\xf0=\xa8D|\x17K\xfc" +
	"\xdc\x7fy\xd9Z\xb3\xab\xcf?\xbd\x90\x16\x03\x91\xe2\xff" +
	"\xcd\x1dB\x02\x81\xd7\xb1H\xf0\xf6\xaf\xa3\x0f\xca]\xee" +
	"}H\xbbA\x97\xdf\x07Z\x07*\xef N\xf4\xdd\xce" +
	"o-\x9f\x9d|\x06\x16\xf3\xa9KL\x80\x987\xf5q" +
	"u\x90Z\xcf\xfd\x0c!uty3@\x1aPy\x03" +
	"qJy\x8ei\xb9\"]0Q\xb6\xcb\x0b\xab\xc2\xa9" +
	"\xa9VA\xe8\x80\xc1de\xa01\xday\xea\xa5iI" +
	"\x924E\x8d\x94-{3\x03\x1d\xf8'\xe4?\xc2*" +
	"\x88\xb4?N\xe8\xa6c\x96\\2\x98\xcc\x88\x18\x88\xb4" +
	"p\x92\xc8\x18\x97a\xc4$Dl\xb3$\x10\"\x09!" +
	"\xea+\x92\xaf\xac\xed8\xdb\xc2\xe9Y\xf0\xeb\xe8\xb2b" +
	"0\xa0\x7fn\xa2\x11\xb9+\xc2\xad\x16+\xee\xc0N\xa0" +
	"f\x8b\x96\xb0+\xa3\xd5\xdf\x00\x00\x00\xff\xff\x1cf\x91" +
	"\x12"

func init() {
	schemas.Register(schema_c1dd04a4b598e212,
		0x8faf26f7ff5fc78a,
		0xcdc43750d2997643,
		0xf15bb405bd10aa7e,
		0xf597a04c6a005ca6,
		0xfe5b5a2c82a9f41c)
}
